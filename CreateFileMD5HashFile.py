# coding=gbk

from hashlib import md5
import os
from sys import argv
import datetime
from progressbar import ProgressBar, Percentage, Bar, ETA, Timer

muteflag = False
createflag = True

def GetFileMD5(filename):
    myhash = md5()
    f = open(filename,'rb')
    t = os.path.getsize(filename)
    r = 0
    last = datetime.datetime.now()
    if not muteflag:
        pbar = ProgressBar(maxval=t, widgets=['Progress: ', Percentage(), ' ', Bar('#'), ' ', ETA(), ' ', Timer()])
    while True:
        b = f.read(8096)
        if not b :
            break
        myhash.update(b)
        r += len(b)
        now = datetime.datetime.now()
        if not muteflag:
            pbar.update(r)
    f.close()
    if not muteflag:
        pbar.finish()
    return myhash.hexdigest()

def WriteMD5File(md5filename, md5vallist):
    md5file = open(md5filename, 'w')
    md5file.write('# MD5 checksums generated by Toxic_Obsidian\'s CFMD5HF Utility.\n')
    md5file.write('# Generated at {}\n\n'.format(datetime.datetime.now().strftime('%Y-%m-%d %H-%M-%S')))
    for md5tuple in md5vallist:
        csfile = md5tuple[0]
        csresult = md5tuple[1]
        md5file.write('{} *{}\n'.format(csresult, csfile))
    md5file.close()

def ChecksumFiles(filelist):
    result = []
    for file in filelist:
        if not os.path.exists(file) or not os.path.isfile(file):
            continue
        if not muteflag:
            print('Checking file: {}'.format(file))
        fcsval = GetFileMD5(file)
        md5tuple = (file, fcsval)
        result.append(md5tuple)
    return result


if __name__ == '__main__':
    filelist = []
    md5filename = ''
    if len(argv) == 1:
        path = input('请输入所要生成MD5值的文件路径或目录：')
        if not os.path.exists(path):
            print('无效的路径！（路径不存在）')
            os.system('pause')
            quit(0)
        if os.path.isfile(path):
            filelist = [path,]
            md5filename = path + '.md5'
        else:
            while True:
                md5filename = input('请命名所要保存MD5信息的文件（不保存请输入`_no_`）: ')
                if md5filename == '_no_':
                    createflag = False
                try:
                    _tf = open(md5filename, 'w')
                    _tf.close()
                except:
                    print('MD5文件路径不合法或无写入权限，请重新输入...')
                    continue
                break
            for curDir, dirs, files in os.walk(path):
                for file in files:
                    filelist.append(os.path.join(curDir, file))
    else:
        for i in range(0, len(argv)):
            if argv[i] == '-p' or argv[i] == '--PATH':
                i += 1
                path = argv[i]
                if not os.path.exists(path):
                    print('Invalid Parameter! (Path not exist)')
                    quit(0)
                if os.path.isfile(path):
                    filelist = [path,]
                else:
                    for curDir, dirs, files in os.walk(path):
                        for file in files:
                            filelist.append(os.path.join(curDir, file))
            elif argv[i] == '-m' or argv[i] == '--MUTE':
                muteflag = True
            elif argv[i] == '-nc' or argv[i] == '--NOT-CREATE':
                createflag = False
            elif argv[i] == '-rf' or argv[i] == '--RESULT-FILE':
                i += 1
                md5filename = argv[i]
        if createflag and md5filename == '':
            if os.path.isfile(path):
                md5filename = path + '.md5'
            else:
                md5filename = os.path.abspath(path) + '/../result.md5'

    starttime = datetime.datetime.now()
    md5result = ChecksumFiles(filelist)
    if createflag:
        WriteMD5File(md5filename, md5result)
    endtime = datetime.datetime.now()
    if not muteflag:
        print('Result: ')
        for f, v in md5result:
            if len(f) > 39:
                print('{:} *{:<39}...\n'.format(v, f))
            else:
                print('{:} *{:<39}\n'.format(v, f))
        print('运行时间：{:.0f}s'.format((endtime-starttime).seconds))
        if createflag:
            print('MD5哈希值已写入' + md5filename)
        else:
            print('根据传入参数，未创建MD5文件')
        os.system('pause')
